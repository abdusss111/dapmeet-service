"""Change Meeting PK to composite session ID and update references

Revision ID: 8fd944f50aad
Revises: 6e140d245736
Create Date: 2025-07-26 20:07:46.335851

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8fd944f50aad'
down_revision: Union[str, None] = '6e140d245736'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### Ручная корректировка миграции ###

    # Этап 1: Добавляем новые колонки в meetings как nullable
    with op.batch_alter_table('meetings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('unique_session_id', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('meeting_id', sa.String(), nullable=True))

    # Этап 2: Заполняем новые колонки данными из старых
    op.execute("UPDATE meetings SET unique_session_id = id || '-' || user_id, meeting_id = id")

    # Этап 3: Делаем новые колонки NOT NULL
    with op.batch_alter_table('meetings', schema=None) as batch_op:
        batch_op.alter_column('unique_session_id', existing_type=sa.String(), nullable=False)
        batch_op.alter_column('meeting_id', existing_type=sa.String(), nullable=False)

    # Этап 4: Обновляем зависимые таблицы (добавляем колонки и заполняем их)
    with op.batch_alter_table('chat_messages', schema=None) as batch_op:
        batch_op.add_column(sa.Column('session_id', sa.String(), nullable=True))
    op.execute("UPDATE chat_messages SET session_id = (SELECT m.unique_session_id FROM meetings m WHERE m.meeting_id = chat_messages.meeting_id LIMIT 1)")
    with op.batch_alter_table('chat_messages', schema=None) as batch_op:
        batch_op.alter_column('session_id', existing_type=sa.String(), nullable=False)

    with op.batch_alter_table('meeting_participants', schema=None) as batch_op:
        batch_op.add_column(sa.Column('session_id', sa.String(), nullable=True))
    op.execute("UPDATE meeting_participants SET session_id = (SELECT m.unique_session_id FROM meetings m WHERE m.meeting_id = meeting_participants.meeting_id AND m.user_id = meeting_participants.user_id)")
    with op.batch_alter_table('meeting_participants', schema=None) as batch_op:
        batch_op.alter_column('session_id', existing_type=sa.String(), nullable=False)

    with op.batch_alter_table('transcript_segments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('session_id', sa.String(), nullable=True))
    op.execute("UPDATE transcript_segments SET session_id = (SELECT m.unique_session_id FROM meetings m WHERE m.meeting_id = transcript_segments.meeting_id LIMIT 1)")
    with op.batch_alter_table('transcript_segments', schema=None) as batch_op:
        batch_op.alter_column('session_id', existing_type=sa.String(), nullable=False)

    # Этап 5: Удаляем старые ключи и колонки
    with op.batch_alter_table('chat_messages', schema=None) as batch_op:
        batch_op.drop_constraint('chat_messages_meeting_id_fkey', type_='foreignkey')
        batch_op.drop_column('meeting_id')
    with op.batch_alter_table('meeting_participants', schema=None) as batch_op:
        batch_op.drop_constraint('meeting_participants_meeting_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('meeting_participants_pkey', type_='primary')
        batch_op.drop_column('meeting_id')
    with op.batch_alter_table('transcript_segments', schema=None) as batch_op:
        batch_op.drop_constraint('transcript_segments_meeting_id_fkey', type_='foreignkey')
        batch_op.drop_column('meeting_id')

    # Этап 6: Удаляем старый PK meetings и создаем новый
    with op.batch_alter_table('meetings', schema=None) as batch_op:
        batch_op.drop_constraint('meetings_pkey', type_='primary')
        batch_op.drop_column('id')
        batch_op.create_primary_key('meetings_pkey', ['unique_session_id'])
        batch_op.create_index(batch_op.f('ix_meetings_meeting_id'), ['meeting_id'], unique=False)

    # Этап 7: Создаем новые внешние ключи
    with op.batch_alter_table('chat_messages', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_chat_messages_session_id', 'meetings', ['session_id'], ['unique_session_id'], ondelete='CASCADE')
    with op.batch_alter_table('meeting_participants', schema=None) as batch_op:
        batch_op.create_primary_key('meeting_participants_pkey', ['session_id', 'user_id'])
        batch_op.create_foreign_key('fk_participants_session_id', 'meetings', ['session_id'], ['unique_session_id'], ondelete='CASCADE')
    with op.batch_alter_table('transcript_segments', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_segments_session_id', 'meetings', ['session_id'], ['unique_session_id'], ondelete='CASCADE')

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('transcript_segments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('meeting_id', sa.VARCHAR(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('transcript_segments_meeting_id_fkey', 'meetings', ['meeting_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_constraint('uix_segment_session_speaker_ts_ver', type_='unique')
        batch_op.drop_index(batch_op.f('ix_transcript_segments_session_id'))
        batch_op.create_unique_constraint('uix_segment_meeting_speaker_ts_ver', ['meeting_id', 'google_meet_user_id', 'timestamp', 'version'])
        batch_op.create_index('ix_transcript_segments_meeting_id', ['meeting_id'], unique=False)
        batch_op.drop_column('session_id')

    with op.batch_alter_table('meetings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False))
        batch_op.drop_index(batch_op.f('ix_meetings_unique_session_id'))
        batch_op.drop_index(batch_op.f('ix_meetings_meeting_id'))
        batch_op.create_index('ix_meetings_id', ['id'], unique=False)
        batch_op.alter_column('unique_session_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
        batch_op.drop_column('meeting_id')

    with op.batch_alter_table('meeting_participants', schema=None) as batch_op:
        batch_op.add_column(sa.Column('meeting_id', sa.VARCHAR(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('meeting_participants_meeting_id_fkey', 'meetings', ['meeting_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_column('session_id')

    with op.batch_alter_table('chat_messages', schema=None) as batch_op:
        batch_op.add_column(sa.Column('meeting_id', sa.VARCHAR(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('chat_messages_meeting_id_fkey', 'meetings', ['meeting_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_index(batch_op.f('ix_chat_messages_session_id'))
        batch_op.create_index('ix_chat_messages_meeting_id', ['meeting_id'], unique=False)
        batch_op.drop_column('session_id')

    # ### end Alembic commands ###
